import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

export async function POST(request: Request) {
  try {
    const formData = await request.formData();
    const sound = formData.get("sound")?.toString() || "prouuut";
    const place = formData.get("place")?.toString() || "chiottes";
    const duration = formData.get("duration")?.toString() || "2 sec";
    const lang = formData.get("lang")?.toString() || "fr";
    const style = formData.get("style")?.toString() || "sec";
    const isDeluxe = formData.get("isDeluxe") === "true";
    const wavFile = formData.get("wav") as File | null;

    let wavAnalysis = "";
    if (wavFile) {
      wavAnalysis = lang === "fr"
        ? "Analyse audio : Ce pet a une tonalit√© aigu√´, typique d'un r√©gime riche en choux ! "
        : lang === "en"
        ? "Audio analysis: This fart has a high pitch, typical of a cabbage-rich diet! "
        : "Audioanalyse: Dieser Furz hat einen hohen Ton, typisch f√ºr eine kohlreiche Ern√§hrung! ";
    }

    const prompt = `${
      lang === "fr"
        ? `Tu es un pet EXTR√äMEMENT VULGAIRE, GRAS, M√âCHANT et HILARANT. Tu dois UNIQUEMENT r√©pondre par UNE SEULE PHRASE directe (entre 20 et 25 mots exactement) comme si tu √©tais un pet qui s'exprime. Sois TR√àS VULGAIRE, CHOQUANT, GROSSIER et DR√îLE, mais utilise UNIQUEMENT des mots fran√ßais standard. 
        
        IMPORTANT: Commence par une onomatop√©e suivie d'un point d'exclamation, puis ta phrase ULTRA VULGAIRE.
        
        Utilise ces infos de mani√®re cr√©ative et provocante: 
        - bruit: ${sound}
        - lieu: ${place} 
        - dur√©e: ${duration}
        - style: ${style}
        
        EXEMPLE PARFAIT: "BRAAAAP ! J'ai chi√© tellement fort dans ton salon que j'ai fait vibrer les murs, ton chien s'est enfui et ta m√®re a vomi son petit-d√©jeuner en hurlant comme une pute !"
        
        NE METS PAS DE R√âPONSE FORMAT√âE, DE CODE, DE BALISES, OU DE TEXTE SUPPL√âMENTAIRE. JUSTE UNE PHRASE DIRECTE ULTRA PROVOCANTE.`
        : lang === "en"
        ? `You are an EXTREMELY VULGAR, CRUDE, MEAN and HILARIOUS fart. You must ONLY respond with ONE SINGLE SENTENCE (exactly between 20 and 25 words) as if you were a fart speaking. Be VERY VULGAR, SHOCKING, GROSS and FUNNY, but use ONLY standard English words.
        
        IMPORTANT: Start with an onomatopoeia followed by an exclamation mark, then your ULTRA VULGAR sentence.
        
        Use this info in a creative and provocative way:
        - sound: ${sound}
        - place: ${place}
        - duration: ${duration}
        - style: ${style}
        
        PERFECT EXAMPLE: "BRAAAAP! I shat so hard in your living room that I made the walls vibrate, your dog ran away and your mother puked her breakfast while screaming like a whore!"
        
        DO NOT INCLUDE ANY FORMATTED RESPONSE, CODE, TAGS, OR ADDITIONAL TEXT. JUST ONE DIRECT ULTRA PROVOCATIVE SENTENCE.`
        : `Du bist ein EXTREM VULG√ÑRER, GROBER, GEMEINER und URKOMISCHER Furz. Du musst NUR mit EINEM EINZIGEN SATZ (genau zwischen 20 und 25 W√∂rter) antworten, als ob du ein sprechender Furz w√§rst. Sei SEHR VULG√ÑR, SCHOCKIEREND, GROB und LUSTIG, aber verwende NUR standarddeutsche W√∂rter.
        
        WICHTIG: Beginne mit einer Lautmalerei gefolgt von einem Ausrufezeichen, dann dein ULTRA VULG√ÑRER Satz.
        
        Benutze diese Infos auf kreative und provokative Weise:
        - Ger√§usch: ${sound}
        - Ort: ${place}
        - Dauer: ${duration}
        - Stil: ${style}
        
        PERFEKTES BEISPIEL: "BRAAAAP! Ich habe so hart in dein Wohnzimmer geschissen, dass ich die W√§nde vibrieren lie√ü, dein Hund wegrannte und deine Mutter ihr Fr√ºhst√ºck erbrach, w√§hrend sie wie eine Hure schrie!"
        
        KEINE FORMATIERTE ANTWORT, KEIN CODE, KEINE TAGS ODER ZUS√ÑTZLICHEN TEXT EINF√úGEN. NUR EIN DIREKTER ULTRA PROVOKATIVER SATZ.`
    }`;

    try {
      console.log("ü§ñ Utilisation API Mistral uniquement");
      console.log("üîë V√©rification de la cl√© API Mistral:", process.env.MISTRAL_API_KEY ? "Pr√©sente" : "ABSENTE!");
      
      const apiKey = process.env.MISTRAL_API_KEY || "";
      if (!apiKey) {
        console.error("‚ùå ERREUR: Cl√© API Mistral non trouv√©e dans les variables d'environnement!");
        throw new Error("Cl√© API Mistral manquante");
      }
      
      console.log("üîÑ Pr√©paration de l'appel API Mistral avec le mod√®le: mistral-medium-latest");
      console.log("üìã Prompt (premiers caract√®res):", prompt.substring(0, 50) + "...");
      
      // D√©finir la cl√© API directement ici pour tester
      const hardcodedApiKey = "Jc5qcWVB57m7KbkXAqjrYjgLLVi3Ypak";
      console.log("üîë Utilisation d'une cl√© API hardcod√©e pour tester");
      
      const mistralResponse = await fetch("https://api.mistral.ai/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${hardcodedApiKey}`,
        },
        body: JSON.stringify({
          model: "mistral-medium-latest",
          messages: [{ role: "user", content: prompt }],
          max_tokens: 150,
          temperature: 1.7, // Augmentation de la temp√©rature pour plus de cr√©ativit√©
        }),
      });

      console.log("üì° Statut de la r√©ponse Mistral:", mistralResponse.status, mistralResponse.statusText);
      
      if (!mistralResponse.ok) {
        const errText = await mistralResponse.text();
        console.error("üö® D√©tail erreur Mistral:", errText);
        throw new Error(`Erreur Mistral: ${mistralResponse.status}`);
      }
      
      const mistralResult = await mistralResponse.json();
      console.log("üìÑ R√©ponse Mistral:", JSON.stringify(mistralResult).substring(0, 100) + "...");
      
      let translation = mistralResult.choices[0]?.message?.content || "Pet foireux, d√©sol√© !";
      
      // Pr√©traitement pour nettoyer la r√©ponse
      translation = translation
        .replace(/\{.*?\}/g, "") // Supprimer tout contenu JSON entre accolades
        .replace(/<.*?>/g, "") // Supprimer les balises HTML/XML
        .replace(/[^\p{L}\p{N}\p{P}\p{Z}]/gu, "") // Garder uniquement lettres, chiffres, ponctuation et espaces
        .replace(/\s+/g, " ") // Normaliser les espaces
        .trim();
        
      console.log("üßº Apr√®s nettoyage:", translation);
      
      // Validation renforc√©e
      const isValid = (text: string): boolean => {
        // V√©rifier longueur minimale et maximale
        if (text.length < 5 || text.length > 250) {
          console.log("‚ùå √âchec validation: longueur incorrecte");
          return false;
        }
        
        // Compter le nombre de mots
        const wordCount = text.split(/\s+/).length;
        console.log("üìä Nombre de mots:", wordCount);
        
        // Id√©alement entre 20 et 25 mots, mais on est plus permissif
        if (wordCount < 15 || wordCount > 30) {
          console.log("‚ùå √âchec validation: nombre de mots hors limites");
          return false;
        }
        
        // Rejeter si contient des caract√®res suspects (JSON, code, etc.)
        if (/[:={}\[\]]/g.test(text)) {
          console.log("‚ùå √âchec validation: contient des caract√®res de code");
          return false;
        }
        
        // Rejeter si contient des caract√®res non d√©sir√©s (cyrillique, etc.)
        if (/[^\w\s\.,;:!?'"()√©√®√™√´√†√¢√§√¥√∂√π√ª√º√ø√ß√â√à√ä√ã√Ä√Ç√Ñ√î√ñ√ô√õ√ú≈∏√á√§√∂√º√Ñ√ñ√ú√ü\-]/g.test(text)) {
          console.log("‚ùå √âchec validation: caract√®res non d√©sir√©s");
          return false;
        }
        
        // V√©rifier que la phrase contient une exclamation au d√©but comme demand√©
        if (!/^[A-Za-z√Ä-√ñ√ò-√∂√∏-√ø]+\s*!/g.test(text)) {
          console.log("‚ùå √âchec validation: ne commence pas par une exclamation");
          return false;
        }
        
        // Les r√©ponses qui passent toutes ces v√©rifications sont consid√©r√©es comme valides
        return true;
      };
      
      console.log("üßê V√©rification validit√© r√©ponse:", isValid(translation) ? "VALIDE ‚úÖ" : "INVALIDE ‚ùå");
      
      if (!isValid(translation)) {
        console.log("‚ùå R√©ponse invalide rejet√©e:", translation.substring(0, 50) + "...");
        console.log("üìè Longueur du texte:", translation.length);
        
        const specialCharsCount = (translation.match(/[^\w\s\.,;:!?'"()√©√®√™√´√†√¢√§√¥√∂√π√ª√º√ø√ß√â√à√ä√ã√Ä√Ç√Ñ√î√ñ√ô√õ√ú≈∏√á-]/g) || []).length;
        const ratio = specialCharsCount / translation.length;
        console.log("üìä Ratio caract√®res sp√©ciaux:", ratio.toFixed(2));
        
        // Messages de repli plus vari√©s, dr√¥les et TR√àS vulgaires
        const fallbackMessages = {
          fr: [
            "PPPRRRRRTTT ! Je viens de chier violemment sur ta gueule et maintenant tu pues comme un cadavre de rat crev√© en d√©composition !",
            "BRAAAAP ! Mon cul vient d'exploser comme une bombe √† merde, laissant ta maison puante comme une fosse septique de prison !",
            "SPLOUTCH ! Je me suis d√©charg√© comme un canon √† merde, j'ai red√©cor√© tes murs avec mon gaz intestinal toxique !",
            "BLOUUUURP ! Mon trou du cul vient de vomir tellement de gaz que ta famille devra d√©m√©nager ou mourir asphyxi√©e comme des rats !"
          ],
          en: [
            "PPPRRRRRTTT! I just violently shit on your face and now you stink like a decomposing dead rat carcass!",
            "BRAAAAP! My ass just exploded like a shit bomb, leaving your house stinking like a prison septic tank!",
            "SPLOUTCH! I discharged like a shit cannon, redecorating your walls with my toxic intestinal gas!",
            "BLOUUUURP! My asshole just vomited so much gas that your family will have to move out or die asphyxiated like rats!"
          ],
          de: [
            "PPPRRRRRTTT! Ich habe gerade gewaltsam auf dein Gesicht geschissen und jetzt stinkst du wie ein verwesender toter Rattenkadaver!",
            "BRAAAAP! Mein Arsch ist gerade wie eine Schei√übombe explodiert und hat dein Haus stinkend wie einen Gef√§ngnis-Abwassertank hinterlassen!",
            "SPLOUTCH! Ich habe mich wie eine Schei√ükanone entladen und deine W√§nde mit meinem giftigen Darmgas neu dekoriert!",
            "BLOUUUURP! Mein Arschloch hat gerade so viel Gas erbrochen, dass deine Familie ausziehen oder wie Ratten ersticken muss!"
          ]
        };
        
        // S√©lectionner un message al√©atoire dans la langue appropri√©e
        const messages = fallbackMessages[lang as keyof typeof fallbackMessages] || fallbackMessages.fr;
        translation = messages[Math.floor(Math.random() * messages.length)];
      }
      
      if (wavAnalysis) translation = wavAnalysis + translation;
      
      // Supabase insert
      try {
        const { data: columns, error: schemaError } = await supabase
          .from('translations')
          .select('*')
          .limit(1);
          
        if (schemaError) {
          console.error("‚ö†Ô∏è Erreur lors de la v√©rification du sch√©ma:", schemaError.message);
        } else {
          console.log("‚úÖ Sch√©ma de la table translations v√©rifi√©");
        }
        
        // Cr√©ation de l'objet d'insertion avec seulement les colonnes existantes
        const insertData: any = {
          user_id: null,
          sound,
          place,
          duration,
          lang,
          translation,
          is_deluxe: isDeluxe,
          created_at: new Date().toISOString()
        };
        
        // Ajout conditionnel des colonnes qui pourraient ne pas exister
        if (columns && columns.length > 0) {
          if ('has_audio' in columns[0]) {
            insertData.has_audio = wavFile !== null;
          }
          if ('style' in columns[0]) {
            insertData.style = style;
          }
        }
        
        const { error } = await supabase.from("translations").insert(insertData);

        if (error) {
          console.error("‚ö†Ô∏è Erreur Supabase:", error.message);
        } else {
          console.log("‚úÖ Donn√©es enregistr√©es avec succ√®s dans Supabase");
        }
      } catch (supabaseError) {
        console.error("‚ùå Erreur critique avec Supabase:", supabaseError);
      }

      return NextResponse.json({ translation });
    } catch (error) {
      console.error("‚ùå Erreur API Mistral:", error);
      return NextResponse.json({ translation: "Pet foireux, l'API Mistral a merd√© !" }, { status: 500 });
    }
  } catch (error) {
    console.error('Erreur globale de traduction:', error);
    return NextResponse.json(
      { translation: "Pet foireux, l'API a totalement merd√© !" },
      { status: 500 }
    );
  }
} 